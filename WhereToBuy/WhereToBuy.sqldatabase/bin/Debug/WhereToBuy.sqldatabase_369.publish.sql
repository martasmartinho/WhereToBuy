/*
Deployment script for WhereToBuy

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WhereToBuy"
:setvar DefaultFilePrefix "WhereToBuy"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

-- cria a base de dados se não exstir ainda
IF NOT EXISTS(SELECT [Name] FROM [SYS].[DATABASES] WHERE [Name] = 'WhereToBuy')
BEGIN
	CREATE DATABASE WhereToBuy COLLATE LATIN1_GENERAL_CI_AS	-- ATENÇÃO QUE TEM TAMBÉM QUE SE ALTERAR A COLLATION NAS PROPRIEDADES DESTE PROJETO
END						
GO

GO
PRINT N'Creating [dbo].[Step4a1_Preparation_Notifications]...';


GO
/*
	Register on CotacoesAvisos, all change that will be sended to database, based on changed rules defined in ProdutosMatching and CotacoesRegras
*/


CREATE PROCEDURE [dbo].[Step4a1_Preparation_Notifications]
	@Info nvarchar(256) OUTPUT
AS

	-- variables
	DECLARE @numberOfAffectedRows integer = 0;


	BEGIN TRY

		/*
			Insert notifications (CotacoesAvisos) of quotations changed values due to changes in rules ProdutosMatching and CotacoesRegras
		*/
				-- cost price update notifications
		INSERT INTO [dbo].[CotacoesAvisos] 
				    (Id, FornecedorCodigo, Data, _ProdutoCodigo, _ComplementoCodigo, AvisoTipoCodigo, Descricao, Criacao)

		SELECT NEWID() AS Id, 
			   c.FornecedorCodigo,
			   c.Data,
			   c._ProdutoCodigo,
			   c._ComplementoCodigo,
			   'CAC01' AS AvisoTipoCodigo,
			   'esta informação pode resultar de uma alteração recente de regras (ProdutosMatching ou CotacoesRegras)!' AS Descricao,
			   GETDATE() AS Criacao

		-- consider all quotations on CotacoesAtuaisRecalcularView, because all of them have changes to report
		FROM [dbo].CotacoesAtuaisRecalcularView c
		WHERE c.PrecoCusto <> c.PrecoCustoCalculado;

		-- sum to @numberOfAffectedRows
		SET @numberOfAffectedRows += @@ROWCOUNT;




		-- cost price formula update notifications
		INSERT INTO [dbo].[CotacoesAvisos] 
				    (Id, FornecedorCodigo, Data, _ProdutoCodigo, _ComplementoCodigo, AvisoTipoCodigo, Descricao, Criacao)

		SELECT NEWID() AS Id, 
			   c.FornecedorCodigo,
			   c.Data,
			   c._ProdutoCodigo,
			   c._ComplementoCodigo,
			   'CAC02' AS AvisoTipoCodigo,
			   'esta informação pode resultar de uma alteração recente da formula correspondente!' AS Descricao,
			   GETDATE() AS Criacao

		-- consider all quotations on CotacoesAtuaisRecalcularView, because all of them have changes to report
		FROM [dbo].CotacoesAtuaisRecalcularView c
		WHERE c.PrecoCustoFormula <> c.FormulaPrecoCustoCalculado;

		-- sum to @numberOfAffectedRows
		SET @numberOfAffectedRows += @@ROWCOUNT;



		-- expiration date update notifications
		INSERT INTO [dbo].[CotacoesAvisos] 
				    (Id, FornecedorCodigo, Data, _ProdutoCodigo, _ComplementoCodigo, AvisoTipoCodigo, Descricao, Criacao)

		SELECT NEWID() AS Id, 
			   c.FornecedorCodigo,
			   c.Data,
			   c._ProdutoCodigo,
			   c._ComplementoCodigo,
			   'CAC03' AS AvisoTipoCodigo,
			   'esta informação pode resultar de uma alteração recente de regras (ProdutosMatching ou CotacoesRegras)!' AS Descricao,
			   GETDATE() AS Criacao

		-- consider all quotations on CotacoesAtuaisRecalcularView, because all of them have changes to report
		FROM [dbo].CotacoesAtuaisRecalcularView c
		WHERE c.Validade <> c.ValidadeCalculada;

		-- sum to @numberOfAffectedRows
		SET @numberOfAffectedRows += @@ROWCOUNT;




		-- expiration date formula update notifications
		INSERT INTO [dbo].[CotacoesAvisos] 
				    (Id, FornecedorCodigo, Data, _ProdutoCodigo, _ComplementoCodigo, AvisoTipoCodigo, Descricao, Criacao)

		SELECT NEWID() AS Id, 
			   c.FornecedorCodigo,
			   c.Data,
			   c._ProdutoCodigo,
			   c._ComplementoCodigo,
			   'CAC04' AS AvisoTipoCodigo,
			   'esta informação pode resultar de uma alteração recente da formula correspondente!' AS Descricao,
			   GETDATE() AS Criacao

		-- consider all quotations on CotacoesAtuaisRecalcularView, because all of them have changes to report
		FROM [dbo].CotacoesAtuaisRecalcularView c
		WHERE c.ValidadeFormula <> c.FormulaValidadeCalculada;

		-- sum to @numberOfAffectedRows
		SET @numberOfAffectedRows += @@ROWCOUNT;




		-- description update notifications
		INSERT INTO [dbo].[CotacoesAvisos] 
				    (Id, FornecedorCodigo, Data, _ProdutoCodigo, _ComplementoCodigo, AvisoTipoCodigo, Descricao, Criacao)

		SELECT NEWID() AS Id, 
			   c.FornecedorCodigo,
			   c.Data,
			   c._ProdutoCodigo,
			   c._ComplementoCodigo,
			   'CAC05' AS AvisoTipoCodigo,
			   'esta informação pode resultar de uma alteração recente da formula de normalização!' AS Descricao,
			   GETDATE() AS Criacao

		-- consider all quotations on CotacoesAtuaisRecalcularView, because all of them have changes to report
		FROM [dbo].CotacoesAtuaisRecalcularView c
		WHERE c.Descricao <> c.DescricaoUniformizada;

		-- sum to @numberOfAffectedRows
		SET @numberOfAffectedRows += @@ROWCOUNT;




		-- features update notifications
		INSERT INTO [dbo].[CotacoesAvisos] 
				    (Id, FornecedorCodigo, Data, _ProdutoCodigo, _ComplementoCodigo, AvisoTipoCodigo, Descricao, Criacao)

		SELECT NEWID() AS Id, 
			   c.FornecedorCodigo,
			   c.Data,
			   c._ProdutoCodigo,
			   c._ComplementoCodigo,
			   'CAC06' AS AvisoTipoCodigo,
			   'esta informação pode resultar de uma alteração recente da formula de normalização!' AS Descricao,
			   GETDATE() AS Criacao

		-- consider all quotations on CotacoesAtuaisRecalcularView, because all of them have changes to report
		FROM [dbo].CotacoesAtuaisRecalcularView c
		WHERE c.Caracteristicas <> c.CaracteristicasUniformizadas;

		-- sum to @numberOfAffectedRows
		SET @numberOfAffectedRows += @@ROWCOUNT;



				
		-- link update notifications
		INSERT INTO [dbo].[CotacoesAvisos] 
				    (Id, FornecedorCodigo, Data, _ProdutoCodigo, _ComplementoCodigo, AvisoTipoCodigo, Descricao, Criacao)

		SELECT NEWID() AS Id, 
			   c.FornecedorCodigo,
			   c.Data,
			   c._ProdutoCodigo,
			   c._ComplementoCodigo,
			   'CAC07' AS AvisoTipoCodigo,
			   'esta informação pode resultar de uma alteração recente da formula de normalização!' AS Descricao,
			   GETDATE() AS Criacao

		-- consider all quotations on CotacoesAtuaisRecalcularView, because all of them have changes to report
		FROM [dbo].CotacoesAtuaisRecalcularView c
		WHERE c.Link <> c.LinkUniformizado;

		-- sum to @numberOfAffectedRows
		SET @numberOfAffectedRows += @@ROWCOUNT;




		-- image update notifications
		INSERT INTO [dbo].[CotacoesAvisos] 
				    (Id, FornecedorCodigo, Data, _ProdutoCodigo, _ComplementoCodigo, AvisoTipoCodigo, Descricao, Criacao)

		SELECT NEWID() AS Id, 
			   c.FornecedorCodigo,
			   c.Data,
			   c._ProdutoCodigo,
			   c._ComplementoCodigo,
			   'CAC08' AS AvisoTipoCodigo,
			   'esta informação pode resultar de uma alteração recente da formula de normalização!' AS Descricao,
			   GETDATE() AS Criacao

		-- consider all quotations on CotacoesAtuaisRecalcularView, because all of them have changes to report
		FROM [dbo].CotacoesAtuaisRecalcularView c
		WHERE c.Imagem <> c.ImagemUniformizada;

		-- sum to @numberOfAffectedRows
		SET @numberOfAffectedRows += @@ROWCOUNT;
		



		-- substitute stock update notifications
		INSERT INTO [dbo].[CotacoesAvisos] 
				    (Id, FornecedorCodigo, Data, _ProdutoCodigo, _ComplementoCodigo, AvisoTipoCodigo, Descricao, Criacao)

		SELECT NEWID() AS Id, 
			   c.FornecedorCodigo,
			   c.Data,
			   c._ProdutoCodigo,
			   c._ComplementoCodigo,
			   'CAC09' AS AvisoTipoCodigo,
			   'esta informação pode resultar de uma alteração recente de regras (ProdutosMatching ou CotacoesRegras)!' AS Descricao,
			   GETDATE() AS Criacao

		-- consider all quotations on CotacoesAtuaisRecalcularView, because all of them have changes to report
		FROM [dbo].CotacoesAtuaisRecalcularView c
		WHERE c.StockCodigoSubstituto <> c.StockCodigoSubstitutoCalculado;

		-- sum to @numberOfAffectedRows
		SET @numberOfAffectedRows += @@ROWCOUNT;
		



		-- substitute stock formula update notifications
		INSERT INTO [dbo].[CotacoesAvisos] 
				    (Id, FornecedorCodigo, Data, _ProdutoCodigo, _ComplementoCodigo, AvisoTipoCodigo, Descricao, Criacao)

		SELECT NEWID() AS Id, 
			   c.FornecedorCodigo,
			   c.Data,
			   c._ProdutoCodigo,
			   c._ComplementoCodigo,
			   'CAC10' AS AvisoTipoCodigo,
			   'esta informação pode resultar de uma alteração recente da formula correspondente!' AS Descricao,
			   GETDATE() AS Criacao

		-- consider all quotations on CotacoesAtuaisRecalcularView, because all of them have changes to report
		FROM [dbo].CotacoesAtuaisRecalcularView c
		WHERE c.StockCodigoSubstitutoJustificacao <> c.JustificacaoStockCodigoSubstitutoCalculado;

		-- sum to @numberOfAffectedRows
		SET @numberOfAffectedRows += @@ROWCOUNT;






		-- fill output @info with sucess message
		SET @Info = '[Step4a1_Preparation_Notifications-01] Number of inserted notifications: ' + CAST(@numberOfAffectedRows as nvarchar);

		-- send true to output
		RETURN 1;

	END TRY

	BEGIN CATCH
		-- fill output @info with occurred error message
		SET @Info = '[Step4a1_Preparation_Notifications-02] ' + CAST(ERROR_NUMBER() as nvarchar) + ' - ' + ERROR_MESSAGE();

		-- send false to output
		RETURN 0;

	END CATCH

RETURN;
GO
PRINT N'Creating [dbo].[Step4a1_Preparation_OtherFieldsRefresh]...';


GO
/*
	Update (refresh) Quotations information that must be changed due to ProdutosMatching or CotacoesRegras update rules.
	This SP uses CotacoesAtuaisRecalcular to simplify the process.
*/


CREATE PROCEDURE [dbo].[Step4a1_Preparation_OtherFieldsRefresh]
	@Info nvarchar(256) OUTPUT
AS

	BEGIN TRY

		/*
			Refresh values of quotation fields, as needed
		*/
		
		UPDATE c
		
		SET c.PrecoCusto = c.PrecoCustoCalculado,
		    c.PrecoCustoFormula = c.FormulaPrecoCustoCalculado,
			c.Validade = c.ValidadeCalculada,
			c.ValidadeFormula = c.FormulaValidadeCalculada,
			c.Descricao = c.DescricaoUniformizada,
			c.Caracteristicas = c.CaracteristicasUniformizadas,
			c.Link = c.LinkUniformizado,
			c.Imagem = c.ImagemUniformizada,
			c.StockCodigoSubstituto = c.StockCodigoSubstitutoCalculado,
			c.StockCodigoSubstitutoJustificacao = c.JustificacaoStockCodigoSubstitutoCalculado,
			c.Versao = GETDATE()

		FROM [dbo].[CotacoesAtuaisRecalcularView] c




		-- fill output @info with sucess message
		SET @Info = '[Step4a1_Preparation_OtherFieldsRefresh-01] Number of Refreshed Quotations: ' + CAST(@@ROWCOUNT as nvarchar);

		-- send true to output
		RETURN 1;

	END TRY

	BEGIN CATCH
		-- fill output @info with occurred error message
		SET @Info = '[Step4a1_Preparation_OtherFieldsRefresh-02] ' + CAST(ERROR_NUMBER() as nvarchar) + ' - ' + ERROR_MESSAGE();

		-- send false to output
		RETURN 0;

	END CATCH

RETURN;
GO
PRINT N'Creating [dbo].[Step4b1_Precautions_Notifications]...';


GO
/*
	This SP makes sure that user is notified via CotacoesAvisos table, that some actual quotations were updated with
	new StockCodigoSubsituto due to date evolution and configuration of percentil codes on Stocks table.
*/

CREATE PROCEDURE [dbo].[Step4b1_Precautions_Notifications]
	@Info nvarchar(256) OUTPUT
AS
	
	-- insert notifications on CotacoesAvisos table
	BEGIN TRY

		/*
			Insert notifications rows for all incomplete quotations that remain unmapped
		*/




		-- fill output @info with sucess message
		SET @Info = '[Step4b1_Precautions_Notifications-01] Number of inserted notifications: ' + CAST(@@ROWCOUNT as nvarchar);

		-- send true to output
		RETURN 1;

	END TRY

	BEGIN CATCH
		-- fill output @info with occurred error message
		SET @Info = '[Step4b1_Precautions_Notifications-02] ' + CAST(ERROR_NUMBER() as nvarchar) + ' - ' + ERROR_MESSAGE();

		-- send false to output
		RETURN 0;

	END CATCH

RETURN;
GO
PRINT N'Creating [dbo].[Step4b2_Precautions_FakeStock]...';


GO
/*
	This stored procedure entends to lower stock availability on all quotations that have more than 2/3 of it's valid life.
	Every Actual Quotations that have more than 2/3 of its life (to expire), must be reconfigured with a more secure availability stock code.
*/


CREATE PROCEDURE [dbo].[Step4b2_Precautions_FakeStock]
	@Info nvarchar(256) OUTPUT
AS

	BEGIN TRY

		/*
			Update quotations with a new Stock Code to prevent a fack stock promotion.
		*/
		UPDATE c

		SET StockCodigoSubstitutoJustificacao =
				CASE WHEN (GETDATE() >= c.P90) AND (c.ValidadeP90_StockCodigo IS NOT NULL) THEN 
								SUBSTRING('!Prevenção[FalsoStock] (' + CONVERT(varchar, GETDATE(), 103) + ') P90 atingido! ' + COALESCE(c.StockCodigoSubstitutoJustificacao, ''), 1, 256)

					 WHEN (GETDATE() >= c.P80) AND (c.ValidadeP80_StockCodigo IS NOT NULL) THEN
								SUBSTRING('!Prevenção[FalsoStock] (' + CONVERT(varchar, GETDATE(), 103) + ') P80 atingido! ' + COALESCE(c.StockCodigoSubstitutoJustificacao, ''), 1, 256)

					 WHEN (GETDATE() >= c.P70) AND (c.ValidadeP70_StockCodigo IS NOT NULL) THEN
								SUBSTRING('!Prevenção[FalsoStock] (' + CONVERT(varchar, GETDATE(), 103) + ') P70 atingido! ' + COALESCE(c.StockCodigoSubstitutoJustificacao, ''), 1, 256)

					 WHEN (GETDATE() >= c.P60) AND (c.ValidadeP60_StockCodigo IS NOT NULL) THEN
								SUBSTRING('!Prevenção[FalsoStock] (' + CONVERT(varchar, GETDATE(), 103) + ') P60 atingido! ' + COALESCE(c.StockCodigoSubstitutoJustificacao, ''), 1, 256)

					 WHEN (GETDATE() >= c.P50) AND (c.ValidadeP50_StockCodigo IS NOT NULL) THEN
								SUBSTRING('!Prevenção[FalsoStock] (' + CONVERT(varchar, GETDATE(), 103) + ') P50 atingido! ' + COALESCE(c.StockCodigoSubstitutoJustificacao, ''), 1, 256)

					 ELSE c.StockCodigoSubstitutoJustificacao
				END,
			
			StockCodigoSubstituto =
				CASE WHEN (GETDATE() >= c.P90) AND (c.ValidadeP90_StockCodigo IS NOT NULL) THEN 
								c.ValidadeP90_StockCodigo

					 WHEN (GETDATE() >= c.P80) AND (c.ValidadeP80_StockCodigo IS NOT NULL) THEN 
								c.ValidadeP80_StockCodigo

					 WHEN (GETDATE() >= c.P70) AND (c.ValidadeP70_StockCodigo IS NOT NULL) THEN 
								c.ValidadeP70_StockCodigo

					 WHEN (GETDATE() >= c.P60) AND (c.ValidadeP60_StockCodigo IS NOT NULL) THEN 
								c.ValidadeP60_StockCodigo

					 WHEN (GETDATE() >= c.P50) AND (c.ValidadeP50_StockCodigo IS NOT NULL) THEN 
								c.ValidadeP50_StockCodigo

					 ELSE c.StockCodigoSubstituto
				END,
			
			c.Versao = GETDATE()

		FROM [dbo].[CotacoesAtuaisFalsoStockView] c





		-- fill output @info with sucess message
		SET @Info = '[Step4b2_Precautions_FakeStock-01] Number of executed FakeStock preventions: ' + CAST(@@ROWCOUNT as nvarchar);

		-- send true to output
		RETURN 1;

	END TRY

	BEGIN CATCH
		-- fill output @info with occurred error message
		SET @Info = '[Step4b2_Precautions_FakeStock-02] ' + CAST(ERROR_NUMBER() as nvarchar) + ' - ' + ERROR_MESSAGE();

		-- send false to output
		RETURN 0;

	END CATCH

RETURN;
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


/* IMPOSTOS */
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[Impostos])
BEGIN	
	INSERT INTO [dbo].[Impostos] ([Codigo], [Descricao], [DesignacaoFiscal], [Taxa], [Inativo], [Criacao], [Versao])
		VALUES ('PT.23', 'IVA PT Continental - Taxa Normal de 23%', 'IVA PT.Continental 23%', 23.00, CAST('false' AS bit), GETDATE(), GETDATE())
END


/* COMPLEMENTOS */
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[Complementos])
BEGIN	
	INSERT INTO [dbo].[Complementos] ([Codigo], [Descricao], [TermoAcrescentar], [TermosRemover], [Inativo], [Criacao], [Versao])
		VALUES ('N/A', 'Não aplicável', NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE())
END


/* AVISOSTIPO */
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[AvisosTipo])
BEGIN	
	INSERT INTO [dbo].[AvisosTipo] ([Codigo], [Descricao], [Gravidade], [Notas], [Icon], [Inativo], [Criacao], [Versao])
		 VALUES ('PFS', 'Prevenção Falso Stock', 3, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('IAPD', 'Inativação Administrativa (Prevenção Preço Desfazado)', 7, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				
				('CICM0', 'Cotação Incompleta [Complemento] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CICM1', 'Cotação Incompleta [Complemento] (mapeamento inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIMM0', 'Cotação Incompleta [Marca] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIMM1', 'Cotação Incompleta [Marca] (mapeamento inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CITM0', 'Cotação Incompleta [Categoria] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CITM1', 'Cotação Incompleta [Categoria] (mapeamento inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CISM0', 'Cotação Incompleta [Stock] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CISM1', 'Cotação Incompleta [Stock] (mapeamento inativo)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIIM0', 'Cotação Incompleta [Imposto] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIIM1', 'Cotação Incompleta [Imposto] (mapeamento inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIDM0', 'Cotação Incompleta [Estado] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIDM1', 'Cotação Incompleta [Estado] (mapeamento inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM0', 'Cotação Incompleta [Produto] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM1', 'Cotação Incompleta [Produto] (mapeamento inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM2', 'Cotação Incompleta [Produto] (fornecedor configurado para não criar automaticamente fichas de produtos)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM3', 'Cotação Incompleta [Produto] (fornecedor configurado para não mapear automaticamente produtos)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM4', 'Cotação Incompleta [Produto] (produto inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM9', 'Cotação Incompleta [Produto] (ambiguidade detetada com outro partnumber de outra marca)', 8, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),

				('CAC01', 'Cotação Atuais, atualização de Preço de Custo (CotacoesRegras, ProdutosMatching)', 4, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CAC02', 'Cotação Atuais, atualização da formula do Preço de Custo', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CAC03', 'Cotação Atuais, atualização de Validade (CotacoesRegras, ProdutosMatching)', 4, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CAC04', 'Cotação Atuais, atualização da formula de calculo da Validade', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CAC05', 'Cotação Atuais, atualização da descrição do produto', 4, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CAC06', 'Cotação Atuais, atualização das caracteristicas do produto', 4, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CAC07', 'Cotação Atuais, atualização do link do produto', 4, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CAC08', 'Cotação Atuais, atualização da imagem do produto', 4, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CAC09', 'Cotação Atuais, atualização do código substituto de stock (CotacoesRegras, ProdutosMatching)', 4, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CAC10', 'Cotação Atuais, atualização da justificação de alteração do código substituto', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE())

END



/* STOCKS */
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[Stocks])
BEGIN	
	INSERT INTO [dbo].[Stocks] ([Codigo], [Descricao], [DisponibilidadeNivel], [Notas], [Inativo], [Criacao], [Versao])
		 VALUES ('D-5','Indisponivel permanentemente', -5, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D-4','Indisponivel sob encomenda (dias entrega: +40)', -4, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D-3','Indisponivel sob encomenda (dias entrega: +25)', -3, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D-2','Indisponivel sob encomenda (dias entrega: +10)', -2, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D-1','Indisponivel sob encomenda (dias entrega: +6)', -1, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+0','Indisponivel momentaneamente (dias entrega: +2)', 0, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+1','Disponivel, stock reduzido', 1, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+2','Disponivel, stock limitado', 2, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+3','Disponivel, stock normal', 3, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+4','Disponivel, stock abundante', 4, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+5','Disponivel permanentemente', 5, NULL, CAST('false' AS bit), GETDATE(), GETDATE())
END




/* FORNECEDORES */
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[Fornecedores])
BEGIN	
	INSERT INTO [dbo].[Fornecedores]
			   ([Codigo], [Nome], [Morada], [CodigoPostal], [LocalidadePostal], [Contribuinte], 
				[Vendedor], [Telefone], [Telemovel], [SMS], [Email], [AcessoOnlineAtivo], [Username], [Password],
				[HorasValidadeSugestao], [ProdutosMatchingAutomatico], [ProdutosCriacaoAutomatica], [DisponibilizaInfoProdutoDetalhe],
				[DescricaoPontuacaoInicial], [CaracteristicasPontuacaoInicial], [LinkPontuacaoInicial], [ImagemPontuacaoInicial],
				[DescricaoSugereInativo], [CaracteristicasSugereInativo], [LinkSugereInativo], [ImagemSugereInativo],
				[AtualizacaoAutomaticaInativaSugestao], [ProdutosConfiancaPreco], [ProdutosConfiancaDisponibilidade],
				[Inativo], [Criacao], [Versao])
		 VALUES
			   ('00024', 'CPC - Companhia Portuguesa de Computadores...', 'Rua Monte dos Pipos, 649', '4460-059', 'Guifões', '999999990',
				'Susana', '222333444', '939949959', '969979989', 'susana@cpcdi.pt', CAST('false' AS bit), 'cpc001', 'cpcpass',
				24, CAST('true' AS bit), CAST('true' AS bit), CAST('true' AS bit),
				5, 5, 5, 5,
				CAST('false' AS bit), CAST('false' AS bit), CAST('false' AS bit), CAST('false' AS bit),
				CAST('false' AS bit), 90, 90,
				CAST('false' AS bit), GETDATE(), GETDATE())
END



/* ESTADOS */
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[Estados])
BEGIN	
	INSERT INTO [dbo].[Estados] ([Codigo], [Descricao], [Inativo], [Criacao], [Versao])
		VALUES ('NOVO', 'Produto novo (nunca usado)', CAST('false' AS bit), GETDATE(), GETDATE()),
			   ('PROMO', 'Produto em promoção', CAST('false' AS bit), GETDATE(), GETDATE()),
			   ('USADO', 'Produto usado', CAST('false' AS bit), GETDATE(), GETDATE()),
			   ('OPORT', 'Oportunidade', CAST('false' AS bit), GETDATE(), GETDATE()),
			   ('GOPOR', 'Grande oportunidade', CAST('false' AS bit), GETDATE(), GETDATE())
END
GO

GO
PRINT N'Update complete.';


GO
