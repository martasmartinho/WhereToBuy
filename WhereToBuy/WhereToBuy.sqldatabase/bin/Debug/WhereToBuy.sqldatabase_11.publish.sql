/*
Deployment script for WhereToBuy

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WhereToBuy"
:setvar DefaultFilePrefix "WhereToBuy"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

-- cria a base de dados se não exstir ainda
IF NOT EXISTS(SELECT [Name] FROM [SYS].[DATABASES] WHERE [Name] = 'WhereToBuy')
BEGIN
	CREATE DATABASE WhereToBuy COLLATE LATIN1_GENERAL_CI_AS	-- ATENÇÃO QUE TEM TAMBÉM QUE SE ALTERAR A COLLATION NAS PROPRIEDADES DESTE PROJETO
END						
GO

GO
PRINT N'Starting rebuilding table [dbo].[Impostos]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Impostos] (
    [Codigo]           NVARCHAR (20) NOT NULL,
    [Descricao]        NVARCHAR (50) NOT NULL,
    [DesignacaoFiscal] NVARCHAR (50) NOT NULL,
    [Taxa]             FLOAT (53)    NOT NULL,
    [Inativo]          BIT           NOT NULL,
    [Criacao]          SMALLDATETIME NOT NULL,
    [Versao]           DATETIME      NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Impostos] PRIMARY KEY CLUSTERED ([Codigo] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Impostos])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Impostos] ([Codigo], [Descricao], [DesignacaoFiscal], [Taxa], [Inativo], [Criacao], [Versao])
        SELECT   [Codigo],
                 [Descricao],
                 [DesignacaoFiscal],
                 [Taxa],
                 [Inativo],
                 [Criacao],
                 [Versao]
        FROM     [dbo].[Impostos]
        ORDER BY [Codigo] ASC;
    END

DROP TABLE [dbo].[Impostos];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Impostos]', N'Impostos';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Impostos]', N'PK_Impostos', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Marcas]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Marcas] (
    [Codigo]    NVARCHAR (20) NOT NULL,
    [Descricao] NVARCHAR (50) NOT NULL,
    [Inativo]   BIT           NOT NULL,
    [Criacao]   SMALLDATETIME NOT NULL,
    [Versao]    DATETIME      NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Marcas] PRIMARY KEY CLUSTERED ([Codigo] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Marcas])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Marcas] ([Codigo], [Descricao], [Inativo], [Criacao], [Versao])
        SELECT   [Codigo],
                 [Descricao],
                 [Inativo],
                 [Criacao],
                 [Versao]
        FROM     [dbo].[Marcas]
        ORDER BY [Codigo] ASC;
    END

DROP TABLE [dbo].[Marcas];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Marcas]', N'Marcas';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Marcas]', N'PK_Marcas', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


/*IMPOSTOS*/
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[Impostos])
BEGIN	
	INSERT INTO [dbo].[Impostos] ([Codigo], [Descricao], [DesignacaoFiscal], [Taxa], [Inativo], [Criacao], [Versao])
		VALUES ('IVA.PTC.N23', 'Iva Portugal Continental (taxa normal 23%)', 'Iva PT.Continental 23%', 23, CAST('true' AS bit), GETDATE(), GETDATE())
END
GO

GO
PRINT N'Update complete.';


GO
