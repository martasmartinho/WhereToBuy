/*
Deployment script for WhereToBuy

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WhereToBuy"
:setvar DefaultFilePrefix "WhereToBuy"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

-- cria a base de dados se não exstir ainda
IF NOT EXISTS(SELECT [Name] FROM [SYS].[DATABASES] WHERE [Name] = 'WhereToBuy')
BEGIN
	CREATE DATABASE WhereToBuy COLLATE LATIN1_GENERAL_CI_AS	-- ATENÇÃO QUE TEM TAMBÉM QUE SE ALTERAR A COLLATION NAS PROPRIEDADES DESTE PROJETO
END						
GO

GO
PRINT N'Dropping FK_Cotacoes_Complemento...';


GO
ALTER TABLE [dbo].[Cotacoes] DROP CONSTRAINT [FK_Cotacoes_Complemento];


GO
PRINT N'Dropping FK_Cotacoes_Marca...';


GO
ALTER TABLE [dbo].[Cotacoes] DROP CONSTRAINT [FK_Cotacoes_Marca];


GO
PRINT N'Dropping FK_Cotacoes_Categoria...';


GO
ALTER TABLE [dbo].[Cotacoes] DROP CONSTRAINT [FK_Cotacoes_Categoria];


GO
PRINT N'Dropping FK_Cotacoes_Stock...';


GO
ALTER TABLE [dbo].[Cotacoes] DROP CONSTRAINT [FK_Cotacoes_Stock];


GO
PRINT N'Dropping FK_Cotacoes_StockSubstituto...';


GO
ALTER TABLE [dbo].[Cotacoes] DROP CONSTRAINT [FK_Cotacoes_StockSubstituto];


GO
PRINT N'Dropping FK_Cotacoes_Imposto...';


GO
ALTER TABLE [dbo].[Cotacoes] DROP CONSTRAINT [FK_Cotacoes_Imposto];


GO
PRINT N'Dropping FK_Cotacoes_Produto...';


GO
ALTER TABLE [dbo].[Cotacoes] DROP CONSTRAINT [FK_Cotacoes_Produto];


GO
PRINT N'Dropping FK_Cotacoes_Fornecedor...';


GO
ALTER TABLE [dbo].[Cotacoes] DROP CONSTRAINT [FK_Cotacoes_Fornecedor];


GO
PRINT N'Dropping FK_ImpostosMatching_Fornecedor...';


GO
ALTER TABLE [dbo].[ImpostosMatching] DROP CONSTRAINT [FK_ImpostosMatching_Fornecedor];


GO
PRINT N'Dropping FK_ImpostosMatching_MapTo...';


GO
ALTER TABLE [dbo].[ImpostosMatching] DROP CONSTRAINT [FK_ImpostosMatching_MapTo];


GO
PRINT N'Dropping FK_MarcasMatching_Fornecedor...';


GO
ALTER TABLE [dbo].[MarcasMatching] DROP CONSTRAINT [FK_MarcasMatching_Fornecedor];


GO
PRINT N'Dropping FK_MarcasMatching_MapTo...';


GO
ALTER TABLE [dbo].[MarcasMatching] DROP CONSTRAINT [FK_MarcasMatching_MapTo];


GO
PRINT N'Dropping FK_ProdutosMatching_Fornecedor...';


GO
ALTER TABLE [dbo].[ProdutosMatching] DROP CONSTRAINT [FK_ProdutosMatching_Fornecedor];


GO
PRINT N'Dropping FK_ProdutosMatching_MapTo...';


GO
ALTER TABLE [dbo].[ProdutosMatching] DROP CONSTRAINT [FK_ProdutosMatching_MapTo];


GO
PRINT N'Dropping FK_ProdutosMatching_StockSubstituto...';


GO
ALTER TABLE [dbo].[ProdutosMatching] DROP CONSTRAINT [FK_ProdutosMatching_StockSubstituto];


GO
PRINT N'Dropping FK_StocksMatching_Fornecedor...';


GO
ALTER TABLE [dbo].[StocksMatching] DROP CONSTRAINT [FK_StocksMatching_Fornecedor];


GO
PRINT N'Dropping FK_StocksMatching_MapTo...';


GO
ALTER TABLE [dbo].[StocksMatching] DROP CONSTRAINT [FK_StocksMatching_MapTo];


GO
PRINT N'Dropping [dbo].[CotacoesAtivasView].[CotacoesAtivasViewIndex]...';


GO
DROP INDEX [CotacoesAtivasViewIndex]
    ON [dbo].[CotacoesAtivasView];


GO
PRINT N'Removing schema binding from [dbo].[CotacoesAtivasView]...';


GO
ALTER VIEW [dbo].[CotacoesAtivasView]
AS
SELECT [FornecedorCodigo],
       [Data],
       [_ProdutoCodigo],
       [_ComplementoCodigo],
       [_ComplementoDescricao],
       [_Partnumber],
       [_MarcaCodigo],
       [_MarcaDescricao],
       [_CategoriaCodigo],
       [_CategoriaDescricao],
       [_StockCodigo],
       [_StockDescricao],
       [_ImpostoCodigo],
       [_ImpostoDescricao],
       [_Descricao],
       [_Link],
       [_Caracteristicas],
       [_Imagem],
       [_Preco],
       [_OutrosCustos],
       [_OutrosCustosDescricao],
       [ComplementoCodigo],
       [Partnumber],
       [MarcaCodigo],
       [CategoriaCodigo],
       [StockCodigo],
       [StockCodigoSubstituto],
       [StockCodigoSubstitutoJustificacao],
       CASE WHEN [StockCodigoSubstituto] IS NULL THEN [StockCodigo] ELSE [StockCodigoSubstituto] END AS [StockCodigoEfetivo],
       [ImpostoCodigo],
       [Descricao],
       [Link],
       [Caracteristicas],
       [Imagem],
       [PrecoCusto],
       [PrecoCustoFormula],
       [Validade],
       [ValidadeFormula],
       [ProdutoCodigo],
       [Completo],
       [Integrado],
       [Inativo],
       [Versao]
FROM   [dbo].[Cotacoes]
WHERE  [Inativo] = CAST ('false' AS BIT);


GO
PRINT N'Starting rebuilding table [dbo].[Cotacoes]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Cotacoes] (
    [FornecedorCodigo]                  NVARCHAR (20)   NOT NULL,
    [Data]                              DATETIME        NOT NULL,
    [_ProdutoCodigo]                    NVARCHAR (256)  NOT NULL,
    [_ComplementoCodigo]                NVARCHAR (128)  NOT NULL,
    [_ComplementoDescricao]             NVARCHAR (128)  NOT NULL,
    [_Partnumber]                       NVARCHAR (25)   NOT NULL,
    [_MarcaCodigo]                      NVARCHAR (128)  NOT NULL,
    [_MarcaDescricao]                   NVARCHAR (128)  NOT NULL,
    [_CategoriaCodigo]                  NVARCHAR (128)  NOT NULL,
    [_CategoriaDescricao]               NVARCHAR (128)  NOT NULL,
    [_StockCodigo]                      NVARCHAR (128)  NOT NULL,
    [_StockDescricao]                   NVARCHAR (128)  NOT NULL,
    [_ImpostoCodigo]                    NVARCHAR (128)  NOT NULL,
    [_ImpostoDescricao]                 NVARCHAR (128)  NOT NULL,
    [_Descricao]                        NVARCHAR (256)  NOT NULL,
    [_Link]                             NVARCHAR (1024) NOT NULL,
    [_Caracteristicas]                  NVARCHAR (2048) NOT NULL,
    [_Imagem]                           NVARCHAR (1024) NOT NULL,
    [_Preco]                            DECIMAL (14, 4) NOT NULL,
    [_OutrosCustos]                     DECIMAL (14, 4) NOT NULL,
    [_OutrosCustosDescricao]            NVARCHAR (128)  NOT NULL,
    [ComplementoCodigo]                 NVARCHAR (20)   NULL,
    [Partnumber]                        NVARCHAR (25)   NULL,
    [MarcaCodigo]                       NVARCHAR (20)   NULL,
    [CategoriaCodigo]                   NVARCHAR (20)   NULL,
    [StockCodigo]                       NVARCHAR (20)   NULL,
    [StockCodigoSubstituto]             NVARCHAR (20)   NULL,
    [StockCodigoSubstitutoJustificacao] NVARCHAR (256)  NULL,
    [ImpostoCodigo]                     NVARCHAR (20)   NULL,
    [Descricao]                         NVARCHAR (256)  NULL,
    [Link]                              NVARCHAR (1024) NULL,
    [Caracteristicas]                   NVARCHAR (2048) NULL,
    [Imagem]                            NVARCHAR (1024) NULL,
    [PrecoCusto]                        DECIMAL (14, 4) NULL,
    [PrecoCustoFormula]                 NVARCHAR (256)  NULL,
    [Validade]                          SMALLDATETIME   NULL,
    [ValidadeFormula]                   NVARCHAR (256)  NULL,
    [ProdutoCodigo]                     NVARCHAR (40)   NULL,
    [Completo]                          BIT             NOT NULL,
    [Integrado]                         BIT             NOT NULL,
    [Inativo]                           BIT             NOT NULL,
    [Versao]                            DATETIME        NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Cotacoes] PRIMARY KEY CLUSTERED ([FornecedorCodigo] ASC, [Data] ASC, [_ProdutoCodigo] ASC, [_ComplementoCodigo] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Cotacoes])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Cotacoes] ([FornecedorCodigo], [Data], [_ProdutoCodigo], [_ComplementoCodigo], [_ComplementoDescricao], [_Partnumber], [_MarcaCodigo], [_MarcaDescricao], [_CategoriaCodigo], [_CategoriaDescricao], [_StockCodigo], [_StockDescricao], [_ImpostoCodigo], [_ImpostoDescricao], [_Descricao], [_Link], [_Caracteristicas], [_Imagem], [_Preco], [_OutrosCustos], [_OutrosCustosDescricao], [ComplementoCodigo], [Partnumber], [MarcaCodigo], [CategoriaCodigo], [StockCodigo], [StockCodigoSubstituto], [StockCodigoSubstitutoJustificacao], [ImpostoCodigo], [Descricao], [Link], [Caracteristicas], [Imagem], [PrecoCusto], [PrecoCustoFormula], [Validade], [ValidadeFormula], [ProdutoCodigo], [Completo], [Integrado], [Inativo], [Versao])
        SELECT   [FornecedorCodigo],
                 [Data],
                 [_ProdutoCodigo],
                 [_ComplementoCodigo],
                 [_ComplementoDescricao],
                 [_Partnumber],
                 [_MarcaCodigo],
                 [_MarcaDescricao],
                 [_CategoriaCodigo],
                 [_CategoriaDescricao],
                 [_StockCodigo],
                 [_StockDescricao],
                 [_ImpostoCodigo],
                 [_ImpostoDescricao],
                 [_Descricao],
                 [_Link],
                 [_Caracteristicas],
                 [_Imagem],
                 [_Preco],
                 [_OutrosCustos],
                 [_OutrosCustosDescricao],
                 [ComplementoCodigo],
                 [Partnumber],
                 [MarcaCodigo],
                 [CategoriaCodigo],
                 [StockCodigo],
                 [StockCodigoSubstituto],
                 [StockCodigoSubstitutoJustificacao],
                 [ImpostoCodigo],
                 [Descricao],
                 [Link],
                 [Caracteristicas],
                 [Imagem],
                 [PrecoCusto],
                 [PrecoCustoFormula],
                 [Validade],
                 [ValidadeFormula],
                 [ProdutoCodigo],
                 [Completo],
                 [Integrado],
                 [Inativo],
                 [Versao]
        FROM     [dbo].[Cotacoes]
        ORDER BY [FornecedorCodigo] ASC, [Data] ASC, [_ProdutoCodigo] ASC, [_ComplementoCodigo] ASC;
    END

DROP TABLE [dbo].[Cotacoes];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Cotacoes]', N'Cotacoes';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Cotacoes]', N'PK_Cotacoes', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[ImpostosMatching]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ImpostosMatching] (
    [FornecedorCodigo] NVARCHAR (20)  NOT NULL,
    [Codigo]           NVARCHAR (128) NOT NULL,
    [Descricao]        NVARCHAR (128) NOT NULL,
    [MapTo]            NVARCHAR (20)  NULL,
    [Inativo]          BIT            NOT NULL,
    [Criacao]          SMALLDATETIME  NOT NULL,
    [Versao]           DATETIME       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_ImpostosMatching] PRIMARY KEY CLUSTERED ([FornecedorCodigo] ASC, [Codigo] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ImpostosMatching])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_ImpostosMatching] ([FornecedorCodigo], [Codigo], [Descricao], [MapTo], [Inativo], [Criacao], [Versao])
        SELECT   [FornecedorCodigo],
                 [Codigo],
                 [Descricao],
                 [MapTo],
                 [Inativo],
                 [Criacao],
                 [Versao]
        FROM     [dbo].[ImpostosMatching]
        ORDER BY [FornecedorCodigo] ASC, [Codigo] ASC;
    END

DROP TABLE [dbo].[ImpostosMatching];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ImpostosMatching]', N'ImpostosMatching';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_ImpostosMatching]', N'PK_ImpostosMatching', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[MarcasMatching]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_MarcasMatching] (
    [FornecedorCodigo] NVARCHAR (20)  NOT NULL,
    [Codigo]           NVARCHAR (128) NOT NULL,
    [Descricao]        NVARCHAR (128) NOT NULL,
    [MapTo]            NVARCHAR (20)  NULL,
    [Inativo]          BIT            NOT NULL,
    [Criacao]          SMALLDATETIME  NOT NULL,
    [Versao]           DATETIME       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_MarcasMatching] PRIMARY KEY CLUSTERED ([FornecedorCodigo] ASC, [Codigo] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[MarcasMatching])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_MarcasMatching] ([FornecedorCodigo], [Codigo], [Descricao], [MapTo], [Inativo], [Criacao], [Versao])
        SELECT   [FornecedorCodigo],
                 [Codigo],
                 [Descricao],
                 [MapTo],
                 [Inativo],
                 [Criacao],
                 [Versao]
        FROM     [dbo].[MarcasMatching]
        ORDER BY [FornecedorCodigo] ASC, [Codigo] ASC;
    END

DROP TABLE [dbo].[MarcasMatching];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_MarcasMatching]', N'MarcasMatching';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_MarcasMatching]', N'PK_MarcasMatching', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[ProdutosMatching]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ProdutosMatching] (
    [FornecedorCodigo]                  NVARCHAR (20)  NOT NULL,
    [ComplementoCodigo]                 NVARCHAR (128) NOT NULL,
    [Codigo]                            NVARCHAR (256) NOT NULL,
    [Descricao]                         NVARCHAR (256) NOT NULL,
    [MapTo]                             NVARCHAR (40)  NULL,
    [HorasValidadeCotacao]              SMALLINT       NULL,
    [StockCodigoSubstituto]             NVARCHAR (20)  NULL,
    [DispensaPrevencaoPrecosDesfazados] BIT            NULL,
    [DataReset]                         SMALLDATETIME  NULL,
    [Notas]                             NVARCHAR (256) NULL,
    [Inativo]                           BIT            NOT NULL,
    [Criacao]                           SMALLDATETIME  NOT NULL,
    [Versao]                            DATETIME       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_ProdutosMatching] PRIMARY KEY CLUSTERED ([FornecedorCodigo] ASC, [ComplementoCodigo] ASC, [Codigo] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ProdutosMatching])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_ProdutosMatching] ([FornecedorCodigo], [ComplementoCodigo], [Codigo], [Descricao], [MapTo], [HorasValidadeCotacao], [StockCodigoSubstituto], [DispensaPrevencaoPrecosDesfazados], [DataReset], [Notas], [Inativo], [Criacao], [Versao])
        SELECT   [FornecedorCodigo],
                 [ComplementoCodigo],
                 [Codigo],
                 [Descricao],
                 [MapTo],
                 [HorasValidadeCotacao],
                 [StockCodigoSubstituto],
                 [DispensaPrevencaoPrecosDesfazados],
                 [DataReset],
                 [Notas],
                 [Inativo],
                 [Criacao],
                 [Versao]
        FROM     [dbo].[ProdutosMatching]
        ORDER BY [FornecedorCodigo] ASC, [ComplementoCodigo] ASC, [Codigo] ASC;
    END

DROP TABLE [dbo].[ProdutosMatching];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ProdutosMatching]', N'ProdutosMatching';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_ProdutosMatching]', N'PK_ProdutosMatching', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[StocksMatching]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_StocksMatching] (
    [FornecedorCodigo] NVARCHAR (20)  NOT NULL,
    [Codigo]           NVARCHAR (128) NOT NULL,
    [Descricao]        NVARCHAR (128) NOT NULL,
    [MapTo]            NVARCHAR (20)  NULL,
    [Inativo]          BIT            NOT NULL,
    [Criacao]          SMALLDATETIME  NOT NULL,
    [Versao]           DATETIME       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_StocksMatching] PRIMARY KEY CLUSTERED ([FornecedorCodigo] ASC, [Codigo] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[StocksMatching])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_StocksMatching] ([FornecedorCodigo], [Codigo], [Descricao], [MapTo], [Inativo], [Criacao], [Versao])
        SELECT   [FornecedorCodigo],
                 [Codigo],
                 [Descricao],
                 [MapTo],
                 [Inativo],
                 [Criacao],
                 [Versao]
        FROM     [dbo].[StocksMatching]
        ORDER BY [FornecedorCodigo] ASC, [Codigo] ASC;
    END

DROP TABLE [dbo].[StocksMatching];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_StocksMatching]', N'StocksMatching';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_StocksMatching]', N'PK_StocksMatching', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating FK_Cotacoes_Complemento...';


GO
ALTER TABLE [dbo].[Cotacoes] WITH NOCHECK
    ADD CONSTRAINT [FK_Cotacoes_Complemento] FOREIGN KEY ([ComplementoCodigo]) REFERENCES [dbo].[Complementos] ([Codigo]);


GO
PRINT N'Creating FK_Cotacoes_Marca...';


GO
ALTER TABLE [dbo].[Cotacoes] WITH NOCHECK
    ADD CONSTRAINT [FK_Cotacoes_Marca] FOREIGN KEY ([MarcaCodigo]) REFERENCES [dbo].[Marcas] ([Codigo]);


GO
PRINT N'Creating FK_Cotacoes_Categoria...';


GO
ALTER TABLE [dbo].[Cotacoes] WITH NOCHECK
    ADD CONSTRAINT [FK_Cotacoes_Categoria] FOREIGN KEY ([CategoriaCodigo]) REFERENCES [dbo].[Categorias] ([Codigo]);


GO
PRINT N'Creating FK_Cotacoes_Stock...';


GO
ALTER TABLE [dbo].[Cotacoes] WITH NOCHECK
    ADD CONSTRAINT [FK_Cotacoes_Stock] FOREIGN KEY ([StockCodigo]) REFERENCES [dbo].[Stocks] ([Codigo]);


GO
PRINT N'Creating FK_Cotacoes_StockSubstituto...';


GO
ALTER TABLE [dbo].[Cotacoes] WITH NOCHECK
    ADD CONSTRAINT [FK_Cotacoes_StockSubstituto] FOREIGN KEY ([StockCodigoSubstituto]) REFERENCES [dbo].[Stocks] ([Codigo]);


GO
PRINT N'Creating FK_Cotacoes_Imposto...';


GO
ALTER TABLE [dbo].[Cotacoes] WITH NOCHECK
    ADD CONSTRAINT [FK_Cotacoes_Imposto] FOREIGN KEY ([ImpostoCodigo]) REFERENCES [dbo].[Impostos] ([Codigo]);


GO
PRINT N'Creating FK_Cotacoes_Produto...';


GO
ALTER TABLE [dbo].[Cotacoes] WITH NOCHECK
    ADD CONSTRAINT [FK_Cotacoes_Produto] FOREIGN KEY ([ProdutoCodigo]) REFERENCES [dbo].[Produtos] ([Codigo]);


GO
PRINT N'Creating FK_Cotacoes_Fornecedor...';


GO
ALTER TABLE [dbo].[Cotacoes] WITH NOCHECK
    ADD CONSTRAINT [FK_Cotacoes_Fornecedor] FOREIGN KEY ([FornecedorCodigo]) REFERENCES [dbo].[Fornecedores] ([Codigo]);


GO
PRINT N'Creating FK_ImpostosMatching_Fornecedor...';


GO
ALTER TABLE [dbo].[ImpostosMatching] WITH NOCHECK
    ADD CONSTRAINT [FK_ImpostosMatching_Fornecedor] FOREIGN KEY ([FornecedorCodigo]) REFERENCES [dbo].[Fornecedores] ([Codigo]);


GO
PRINT N'Creating FK_ImpostosMatching_MapTo...';


GO
ALTER TABLE [dbo].[ImpostosMatching] WITH NOCHECK
    ADD CONSTRAINT [FK_ImpostosMatching_MapTo] FOREIGN KEY ([MapTo]) REFERENCES [dbo].[Impostos] ([Codigo]);


GO
PRINT N'Creating FK_MarcasMatching_Fornecedor...';


GO
ALTER TABLE [dbo].[MarcasMatching] WITH NOCHECK
    ADD CONSTRAINT [FK_MarcasMatching_Fornecedor] FOREIGN KEY ([FornecedorCodigo]) REFERENCES [dbo].[Fornecedores] ([Codigo]);


GO
PRINT N'Creating FK_MarcasMatching_MapTo...';


GO
ALTER TABLE [dbo].[MarcasMatching] WITH NOCHECK
    ADD CONSTRAINT [FK_MarcasMatching_MapTo] FOREIGN KEY ([MapTo]) REFERENCES [dbo].[Marcas] ([Codigo]);


GO
PRINT N'Creating FK_ProdutosMatching_Fornecedor...';


GO
ALTER TABLE [dbo].[ProdutosMatching] WITH NOCHECK
    ADD CONSTRAINT [FK_ProdutosMatching_Fornecedor] FOREIGN KEY ([FornecedorCodigo]) REFERENCES [dbo].[Fornecedores] ([Codigo]);


GO
PRINT N'Creating FK_ProdutosMatching_MapTo...';


GO
ALTER TABLE [dbo].[ProdutosMatching] WITH NOCHECK
    ADD CONSTRAINT [FK_ProdutosMatching_MapTo] FOREIGN KEY ([MapTo]) REFERENCES [dbo].[Produtos] ([Codigo]);


GO
PRINT N'Creating FK_ProdutosMatching_StockSubstituto...';


GO
ALTER TABLE [dbo].[ProdutosMatching] WITH NOCHECK
    ADD CONSTRAINT [FK_ProdutosMatching_StockSubstituto] FOREIGN KEY ([StockCodigoSubstituto]) REFERENCES [dbo].[Stocks] ([Codigo]);


GO
PRINT N'Creating FK_StocksMatching_Fornecedor...';


GO
ALTER TABLE [dbo].[StocksMatching] WITH NOCHECK
    ADD CONSTRAINT [FK_StocksMatching_Fornecedor] FOREIGN KEY ([FornecedorCodigo]) REFERENCES [dbo].[Fornecedores] ([Codigo]);


GO
PRINT N'Creating FK_StocksMatching_MapTo...';


GO
ALTER TABLE [dbo].[StocksMatching] WITH NOCHECK
    ADD CONSTRAINT [FK_StocksMatching_MapTo] FOREIGN KEY ([MapTo]) REFERENCES [dbo].[Stocks] ([Codigo]);


GO
PRINT N'Adding schema binding to [dbo].[CotacoesAtivasView]...';


GO
/*
	NOTA:
	Esta view materializada, representa todas as cotações inativas = 'false'
		> Incompletas
		> Completas
		> Integradas

	- A view é materializada atendendo ao facto de poder representar um enorme volume de informação
*/


ALTER VIEW [dbo].[CotacoesAtivasView] WITH SchemaBinding -- todos os campos têm que ser especificados pelo facto de ser uma view materializada
	AS 
	SELECT [FornecedorCodigo], [Data], [_ProdutoCodigo], [_ComplementoCodigo], [_ComplementoDescricao],
	       [_Partnumber], [_MarcaCodigo], [_MarcaDescricao], [_CategoriaCodigo], [_CategoriaDescricao], [_StockCodigo], [_StockDescricao],
		   [_ImpostoCodigo], [_ImpostoDescricao], [_Descricao], [_Link], [_Caracteristicas], [_Imagem], [_Preco], [_OutrosCustos], [_OutrosCustosDescricao],
		   [ComplementoCodigo], [Partnumber], [MarcaCodigo], [CategoriaCodigo], 
		   [StockCodigo], [StockCodigoSubstituto], [StockCodigoSubstitutoJustificacao], 
		   CASE WHEN [StockCodigoSubstituto] IS NULL THEN [StockCodigo] ELSE [StockCodigoSubstituto] END AS [StockCodigoEfetivo],
		   [ImpostoCodigo], [Descricao], [Link], [Caracteristicas], [Imagem], [PrecoCusto], [PrecoCustoFormula],
		   [Validade], [ValidadeFormula], [ProdutoCodigo], 
		   [Completo], [Integrado],
		   [Inativo], [Versao]
	
	FROM [dbo].[Cotacoes]
	WHERE [Inativo] = CAST('false' as bit);


-- O indice que torna esta view materializada chama-se IDX_CotacoesAtivas.
GO
PRINT N'Creating [dbo].[CotacoesAtivasView].[CotacoesAtivasViewIndex]...';


GO
CREATE UNIQUE CLUSTERED INDEX [CotacoesAtivasViewIndex]
    ON [dbo].[CotacoesAtivasView]([FornecedorCodigo] ASC, [Data] ASC, [_ProdutoCodigo] ASC, [_ComplementoCodigo] ASC);


GO
PRINT N'Refreshing [dbo].[CotacoesAtuaisView]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CotacoesAtuaisView]';


GO
PRINT N'Refreshing [dbo].[CotacoesIncompletasView]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CotacoesIncompletasView]';


GO
PRINT N'Refreshing [dbo].[CotacoesNaoIntegradasView]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CotacoesNaoIntegradasView]';


GO
PRINT N'Refreshing [dbo].[CotacaoInsertSP]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CotacaoInsertSP]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


/* IMPOSTOS */
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[Impostos])
BEGIN	
	INSERT INTO [dbo].[Impostos] ([Codigo], [Descricao], [DesignacaoFiscal], [Taxa], [Inativo], [Criacao], [Versao])
		VALUES ('IVA.PTC.N23', 'IVA PT Continental - Taxa Normal de 23%', 'IVA PT.Continental 23%', 23.00, CAST('false' AS bit), GETDATE(), GETDATE())
END


/* COMPLEMENTOS */
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[Complementos])
BEGIN	
	INSERT INTO [dbo].[Complementos] ([Codigo], [Descricao], [TermoAcrescentar], [TermosRemover], [Inativo], [Criacao], [Versao])
		VALUES ('N/A', 'Não aplicável', NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE())
END


/* AVISOSTIPO */
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[AvisosTipo])
BEGIN	
	INSERT INTO [dbo].[AvisosTipo] ([Codigo], [Descricao], [Gravidade], [Notas], [Icon], [Inativo], [Criacao], [Versao])
		 VALUES ('PFS', 'Prevenção Falso Stock', 3, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('IAPD', 'Inativação Administrativa (Prevenção Preço Desfazado)', 7, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CICM0', 'Cotação Incompleta [Complemento] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CICM1', 'Cotação Incompleta [Complemento] (mapeamento inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIMM0', 'Cotação Incompleta [Marca] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIMM1', 'Cotação Incompleta [Marca] (mapeamento inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CITM0', 'Cotação Incompleta [Categoria] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CITM1', 'Cotação Incompleta [Categoria] (mapeamento inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CISM0', 'Cotação Incompleta [Stock] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CISM1', 'Cotação Incompleta [Stock] (mapeamento inativo)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIIM0', 'Cotação Incompleta [Imposto] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIIM1', 'Cotação Incompleta [Imposto] (mapeamento inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM0', 'Cotação Incompleta [Produto] (mapeamento incompleto, preenchimento manual necessário)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM1', 'Cotação Incompleta [Produto] (mapeamento inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM2', 'Cotação Incompleta [Produto] (fornecedor configurado para não criar automaticamente fichas de produtos)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM3', 'Cotação Incompleta [Produto] (fornecedor configurado para não mapear automaticamente produtos)', 6, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM4', 'Cotação Incompleta [Produto] (produto inativo)', 2, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('CIPM9', 'Cotação Incompleta [Produto] (ambiguidade detetada com outro partnumber de outra marca)', 8, NULL, NULL, CAST('false' AS bit), GETDATE(), GETDATE())

END



/* STOCKS */
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[Stocks])
BEGIN	
	INSERT INTO [dbo].[Stocks] ([Codigo], [Descricao], [DisponibilidadeNivel], [Notas], [Inativo], [Criacao], [Versao])
		 VALUES ('D-5','Indisponivel permanentemente', -5, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D-4','Indisponivel sob encomenda (dias entrega: +40)', -4, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D-3','Indisponivel sob encomenda (dias entrega: +25)', -3, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D-2','Indisponivel sob encomenda (dias entrega: +10)', -2, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D-1','Indisponivel sob encomenda (dias entrega: +6)', -1, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+0','Indisponivel momentaneamente (dias entrega: +2)', 0, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+1','Disponivel, stock reduzido', 1, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+2','Disponivel, stock limitado', 2, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+3','Disponivel, stock normal', 3, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+4','Disponivel, stock abundante', 4, NULL, CAST('false' AS bit), GETDATE(), GETDATE()),
				('D+5','Disponivel permanentemente', 5, NULL, CAST('false' AS bit), GETDATE(), GETDATE())
END




/* FORNECEDORES */
IF NOT EXISTS(SELECT [Codigo] FROM [dbo].[Fornecedores])
BEGIN	
	INSERT INTO [dbo].[Fornecedores]
			   ([Codigo], [Nome], [Morada], [CodigoPostal], [LocalidadePostal], [Contribuinte], 
				[Vendedor], [Telefone], [Telemovel], [SMS], [Email], [AcessoOnlineAtivo], [Username], [Password],
				[HorasValidadeSugestao], [ProdutosMatchingAutomatico], [ProdutosCriacaoAutomatica], [DisponibilizaInfoProdutoDetalhe],
				[DescricaoPontuacaoInicial], [CaracteristicasPontuacaoInicial], [LinkPontuacaoInicial], [ImagemPontuacaoInicial],
				[DescricaoSugereInativo], [CaracteristicasSugereInativo], [LinkSugereInativo], [ImagemSugereInativo],
				[AtualizacaoAutomaticaInativaSugestao], [ProdutosConfiancaPreco], [ProdutosConfiancaDisponibilidade],
				[Inativo], [Criacao], [Versao])
		 VALUES
			   ('00024', 'CPC - Companhia Portuguesa de Computadores...', 'Rua Monte dos Pipos, 649', '4460-059', 'Guifões', '999999990',
				'Susana', '222333444', '939949959', '969979989', 'susana@cpcdi.pt', CAST('false' AS bit), 'cpc001', 'cpcpass',
				24, CAST('true' AS bit), CAST('true' AS bit), CAST('true' AS bit),
				5, 5, 5, 5,
				CAST('false' AS bit), CAST('false' AS bit), CAST('false' AS bit), CAST('false' AS bit),
				CAST('false' AS bit), 90, 90,
				CAST('false' AS bit), GETDATE(), GETDATE())
END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Cotacoes] WITH CHECK CHECK CONSTRAINT [FK_Cotacoes_Complemento];

ALTER TABLE [dbo].[Cotacoes] WITH CHECK CHECK CONSTRAINT [FK_Cotacoes_Marca];

ALTER TABLE [dbo].[Cotacoes] WITH CHECK CHECK CONSTRAINT [FK_Cotacoes_Categoria];

ALTER TABLE [dbo].[Cotacoes] WITH CHECK CHECK CONSTRAINT [FK_Cotacoes_Stock];

ALTER TABLE [dbo].[Cotacoes] WITH CHECK CHECK CONSTRAINT [FK_Cotacoes_StockSubstituto];

ALTER TABLE [dbo].[Cotacoes] WITH CHECK CHECK CONSTRAINT [FK_Cotacoes_Imposto];

ALTER TABLE [dbo].[Cotacoes] WITH CHECK CHECK CONSTRAINT [FK_Cotacoes_Produto];

ALTER TABLE [dbo].[Cotacoes] WITH CHECK CHECK CONSTRAINT [FK_Cotacoes_Fornecedor];

ALTER TABLE [dbo].[ImpostosMatching] WITH CHECK CHECK CONSTRAINT [FK_ImpostosMatching_Fornecedor];

ALTER TABLE [dbo].[ImpostosMatching] WITH CHECK CHECK CONSTRAINT [FK_ImpostosMatching_MapTo];

ALTER TABLE [dbo].[MarcasMatching] WITH CHECK CHECK CONSTRAINT [FK_MarcasMatching_Fornecedor];

ALTER TABLE [dbo].[MarcasMatching] WITH CHECK CHECK CONSTRAINT [FK_MarcasMatching_MapTo];

ALTER TABLE [dbo].[ProdutosMatching] WITH CHECK CHECK CONSTRAINT [FK_ProdutosMatching_Fornecedor];

ALTER TABLE [dbo].[ProdutosMatching] WITH CHECK CHECK CONSTRAINT [FK_ProdutosMatching_MapTo];

ALTER TABLE [dbo].[ProdutosMatching] WITH CHECK CHECK CONSTRAINT [FK_ProdutosMatching_StockSubstituto];

ALTER TABLE [dbo].[StocksMatching] WITH CHECK CHECK CONSTRAINT [FK_StocksMatching_Fornecedor];

ALTER TABLE [dbo].[StocksMatching] WITH CHECK CHECK CONSTRAINT [FK_StocksMatching_MapTo];


GO
PRINT N'Update complete.';


GO
