/*
Deployment script for WhereToBuy

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WhereToBuy"
:setvar DefaultFilePrefix "WhereToBuy"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[Utilizadores].[Email] on table [dbo].[Utilizadores] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Utilizadores].[Mobile] on table [dbo].[Utilizadores] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Utilizadores].[Sms] on table [dbo].[Utilizadores] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Utilizadores])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Starting rebuilding table [dbo].[Utilizadores]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Utilizadores] (
    [Username]      NVARCHAR (25)  NOT NULL,
    [Password]      VARBINARY (64) NOT NULL,
    [Nome]          NVARCHAR (50)  NOT NULL,
    [Email]         NVARCHAR (100) NOT NULL,
    [Mobile]        NVARCHAR (15)  NOT NULL,
    [Sms]           NVARCHAR (15)  NOT NULL,
    [Administrador] BIT            NOT NULL,
    [Inativo]       BIT            NOT NULL,
    [Criacao]       SMALLDATETIME  NOT NULL,
    [Versao]        DATETIME       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Utilizadores] PRIMARY KEY CLUSTERED ([Username] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Utilizadores])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Utilizadores] ([Username], [Password], [Nome], [Administrador], [Inativo], [Criacao], [Versao])
        SELECT   [Username],
                 [Password],
                 [Nome],
                 [Administrador],
                 [Inativo],
                 [Criacao],
                 [Versao]
        FROM     [dbo].[Utilizadores]
        ORDER BY [Username] ASC;
    END

DROP TABLE [dbo].[Utilizadores];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Utilizadores]', N'Utilizadores';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Utilizadores]', N'PK_Utilizadores', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[UserInsert]...';


GO
ALTER PROCEDURE [dbo].[UserInsert]
	@Username nvarchar(20),
	@Password varbinary(64),
	@Nome nvarchar(50),
	@Email nvarchar(100),
	@Mobile nvarchar(15),
	@Sms nvarchar(15),
	@Inativo bit
AS
	
	DECLARE @Criacao smalldatetime, @Versao datetime, @NumeroLinhasAfetadas int, @Erro nvarchar(255)

	SET @Criacao = GETDATE()
	SET @Versao = GETDATE()


	-- INSERÇÃO DO REGISTO
	BEGIN TRY
		 
		-- INICIA CONTAGEM DE @@ROWCOUNT (para quando usado o ExecuteNonQuery())
		SET NOCOUNT OFF

		-- INSERIR REGISTO
		INSERT INTO [dbo].[Utilizadores] ([Username], [Password], [Nome], [Email], [Mobile], [Sms], [Inativo], [Criacao], [Versao]) 
					VALUES (@Username, HASHBYTES('SHA2_512', @Password), @Nome, @Email, @Mobile, @Sms, @Inativo, @Criacao, @Versao);
		
		SET @NumeroLinhasAfetadas = @@ROWCOUNT -- GUARDAR O NUMERO DE LINHAS AFETADAS

		-- ACABA CONTAGEM DE @@ROWCOUNT
		SET NOCOUNT ON

		-- RETORNAR O NUMERO DE LINHAS AFETADAS
		-- Quando usado o ExecuteNonQuery é o @@ROWCOUNT que é lido (SET NOCOUNT OFF/ON),  e não esta variável
		RETURN @NumeroLinhasAfetadas

	END TRY


	-- SE EXISTIRAM ERROS, DESFAZER TRANSACÇÃO
	BEGIN CATCH

		-- DISPARAR UM ERRO
		SET @Erro = 'WhereToBuy-I10] ' + ERROR_MESSAGE();
		RAISERROR (@Erro, 15, 1)
		RETURN 0

	END CATCH
GO
PRINT N'Altering [dbo].[UserUpdate]...';


GO
ALTER PROCEDURE [dbo].[UserUpdate]
	@Username nvarchar(20),
	@Password varbinary(64),
	@Nome nvarchar(50),
	@Email nvarchar(100),
	@Mobile nvarchar(15),
	@Sms nvarchar(15),
	@Inativo bit,
	@Versao datetime
AS

	DECLARE @Erro nvarchar(255)


	-- VALIDAR SE O REGISTO EXISTE
	IF NOT EXISTS(SELECT [Username] FROM [dbo].[Utilizadores] WHERE [Username] = @Username)
	BEGIN
		-- DISPARAR UM ERRO
		SET @Erro = '[WhereToBuy-U01] ' + 'O registo que pretende alterar não existe!';
		RAISERROR (@Erro, 15, 1)
		RETURN 0
	END

	-- VALIDAR SE A VERSÃO AINDA É A MESMA
	IF NOT EXISTS(SELECT [Username] FROM [dbo].[Utilizadores] WHERE [Username] = @Username AND [Versao] = @Versao)
	BEGIN
		-- DISPARAR UM ERRO
		SET @Erro = '[WhereToBuy-U02] ' + 'O registo que pretende alterar, já foi alterado desde que o abriu!';
		RAISERROR (@Erro, 15, 1)
		RETURN 0
	END


	-- TUDO OK PARA SEGUIR EM FRENTE
	DECLARE @NovaVersao datetime, @NumeroLinhasAfetadas int

	SET @NovaVersao = GETDATE()


	-- ALTERAÇÃO DO REGISTO
	BEGIN TRY

		-- INICIA CONTAGEM DE @@ROWCOUNT (para quando usado o ExecuteNonQuery())
		SET NOCOUNT OFF

		-- ALTERAR REGISTO
		UPDATE [dbo].[Utilizadores] SET [Password] = HASHBYTES('SHA2_512', @Password),
									[Nome] = @Nome,
									[Email] = @Email,
									[Mobile] = @Mobile,
									[Sms] = @Sms,
									[Versao] = @NovaVersao

								WHERE [Username] = @Username

		SET @NumeroLinhasAfetadas = @@ROWCOUNT -- GUARDAR O NUMERO DE LINHAS AFETADAS

		-- ACABA CONTAGEM DE @@ROWCOUNT
		SET NOCOUNT ON

		-- RETORNAR O NUMERO DE LINHAS AFETADAS
		-- Quando usado o ExecuteNonQuery é o @@ROWCOUNT que é lido (SET NOCOUNT OFF/ON), e não esta variável
		RETURN @NumeroLinhasAfetadas

	END TRY


	-- SE EXISTIRAM ERROS
	BEGIN CATCH

		-- DISPARAR UM ERRO
		SET @Erro = '[WhereToBuy-U10] ' + ERROR_MESSAGE();
		RAISERROR (@Erro, 15, 1)
		RETURN 0

	END CATCH
GO
PRINT N'Altering [dbo].[UserSelect]...';


GO
ALTER PROCEDURE [dbo].[UserSelect]
	@WhereClause nvarchar(1024) = '',			-- ex1: Codigo IN ('001', '002'); ex2: Descricao LIKE '_este'; ex3: Descricao LIKE '%est%'
	@OrderByClause nvarchar(256) = ''			-- ex: Codigo desc
AS
	
	DECLARE @select nvarchar(2048), @where nvarchar(1024), @orderBy nvarchar(256), @sqlQuery nvarchar(4000)
	

	SET @select = 'SELECT utilizadores.[Username], utilizadores.[Passord], utilizadores.[Nome], utilizadores.[Email], utilizadores.[Mobile], utilizadores.[Sms], utilizadores.[Inativo], utilizadores.[Criacao], utilizadores.[Versao]				
						FROM [dbo].[Utilizadores] utilizadores' 
	

	SET @where = LTRIM(RTRIM(@WhereClause))
	IF Len(@where) > 0
	BEGIN
		SET @where = ' WHERE ' + @where
	END


	SET @orderBy = LTRIM(RTRIM(@OrderByClause))
	IF LEN(@orderBy) > 0
	BEGIN
		SET @orderBy = ' ORDER BY ' + @orderBy
	END


	SET @sqlQuery = @select + @where + @orderBy  


	EXEC(@sqlQuery)


RETURN @@ROWCOUNT
GO
PRINT N'Refreshing [dbo].[UserDelete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[UserDelete]';


GO
PRINT N'Update complete.';


GO
